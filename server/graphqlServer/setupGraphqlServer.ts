import express from 'express'
import { createServer } from 'http'
import { ApolloServer } from '@apollo/server'
import graphqlUploadExpress from 'graphql-upload/graphqlUploadExpress.mjs'
import { expressMiddleware } from '@apollo/server/express4'
import { WebSocketServer } from 'ws'
import { useServer } from 'graphql-ws/lib/use/ws'
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'
import cors from 'cors'

import { schema } from '../nexus'
import { createApolloContext } from '../nexus/createApolloContext'
import { PrismaContext } from '../nexus/context'

/**
 * –ü–æ–¥–Ω–∏–º–∞–µ–º –≥—Ä–∞—Ñ-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É —Å –≤–µ–±—Å–æ–∫–µ—Ç–æ–º.
 * –ù–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–∞–≥–∞ –≤ –Ω–µ–∫—Å—Ç–µ –Ω–µ –¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—â–µ
 * –æ–¥–∏–Ω –≤–µ–±—Å–æ–∫–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –ª–æ–º–∞–µ—Ç—Å—è –∏ –µ–≥–æ hmr, –∏ –Ω–∞—à –≤–µ–±-—Å–æ–∫–µ—Ç
 */
export async function setupGraphqlServer(): Promise<{ port: number }> {
  const apolloServer = new ApolloServer<PrismaContext>({
    // schema: applyMiddleware(schema, permissions),
    schema,
    introspection: true,
    includeStacktraceInErrorResponses: process.env.NODE_ENV === 'development',
    plugins: [],
    formatError: (error) => {
      if (process.env.NODE_ENV === 'development') {
        console.error('GraphQL Error', error)
        // return new Error('Internal server error')
      }

      return error
    },
  })

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ GraphQL
  const port = parseInt(process.env.GRAPHQL_WS_PORT || '4000', 10)

  const app = express()

  app.use(express.json())

  // –í–∞–∂–Ω–æ: middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Apollo
  app.use(graphqlUploadExpress({ maxFileSize: 50_000_000, maxFiles: 10 }))

  const httpServer = createServer(app)

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
  const wsServer = new WebSocketServer({
    server: httpServer,
    path: '/api',
  })

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket –¥–ª—è GraphQL –ø–æ–¥–ø–∏—Å–æ–∫
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const serverCleanup = useServer(
    {
      schema,
      context: async (ctx) => {
        const tokenRaw =
          typeof ctx.connectionParams?.Authorization === 'string'
            ? ctx.connectionParams?.Authorization
            : undefined

        return createApolloContext({
          req: {
            headers: {
              authorization: tokenRaw,
            },
          },
          type: 'ws',
        })
      },
      // onConnect: () => {
      //   if (process.env.NODE_ENV === 'development') {
      //     // eslint-disable-next-line no-console
      //     console.log('üîå WS connected')
      //   }
      // },
      onError: async (_ctx, message, errors) => {
        console.error('ws onError', message, errors)

        return errors
      },
    },
    wsServer,
  )

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã HTTP —Å–µ—Ä–≤–µ—Ä–∞
  apolloServer.addPlugin(ApolloServerPluginDrainHttpServer({ httpServer }))

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã WebSocket —Å–µ—Ä–≤–µ—Ä–∞
  apolloServer.addPlugin({
    async serverWillStart() {
      return {
        async drainServer() {
          await serverCleanup.dispose()
        },
      }
    },
  })

  await apolloServer.start()

  app.use(
    '/api',
    cors<cors.CorsRequest>(),
    express.json(),
    expressMiddleware(apolloServer, {
      context: ({ req }) => createApolloContext({ req, type: 'other' }),
    }),
  )

  httpServer.listen(port, () => {
    // eslint-disable-next-line no-console
    console.log(`üöÄ GraphQL server ready at http://localhost:${port}/api`)
    // eslint-disable-next-line no-console
    console.log(`üöÄ WebSocket endpoint ready at ws://localhost:${port}/api`)
  })

  return { port }
}
